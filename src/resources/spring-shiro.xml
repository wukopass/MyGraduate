<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--加载缓存配置文件ehcache.xml-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.rtworld.matcher.LoginLimitCredentialsMatcher">
        <!--加载缓存配置对象-->
        <property name="cacheManager" ref="cacheManager" />
        <!--加密方式-->
        <property name="hashAlgorithmName" value="md5"/>
        <!--加密次数-->
        <property name="hashIterations" value="3"/>
       <!-- 表示是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64；-->
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    <!-- Realm实现 -->
    <bean id="userRealm" class="com.rtworld.realm.UserRealm">
        <!--加载凭证匹配器，加密方式credentialsMatcher-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!-- 启用缓存 -->
        <property name="cachingEnabled" value="false"/>
        <!-- 缓存用户名和密码,在缓存范围内,登录不再查询数据库的用户名和密码 -->
        <property name="authenticationCachingEnabled" value="true"/>
        <!--定义缓存用户凭证名和值-->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 缓存用户的角色和权限,不用在每次访问URI的时候去获取数据库的角色和权限 -->
        <property name="authorizationCachingEnabled" value="true"/>
        <!--定义缓存的用户权限名和值-->
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    <!-- 会话验证调度器,web环境下用户不主动点退出，session是没有删除的 -->
    <!--创建 shiro 自己的 session  ，不依靠 tomcat 的 session-->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!--sessionid 消除时间 毫秒为单位-->
        <property name="sessionValidationInterval" value="180000"/>
        <!--加载会话管理器 sessionManager-->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="name" value="shiro_id"/>
        <!-- 保证cookie无法被js读取，保证不被XSS攻击 -->
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="180000"/>
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
    </bean>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <!-- Shiro生命周期处理器
    用于Initializable接口的Shiro实现类初始化和销毁时自动调用
    Initializable.init()和Destroyable.destroy()方法。
    如UserRealm就实现了Initializable，
    而DefaultSecurityManager实现了Destroyable。
    -->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter"
          class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <!--<property name="loginUrl" value="/jsp/login.jsp"/>-->
    </bean>
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 没有登录就重定向的地址 -->
        <property name="loginUrl" value="/Quan/login.jsp"/>
        <property name="unauthorizedUrl" value="/Quan/mainMenu.jsp"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
     <property name="filterChainDefinitions">
            <value>
                **register* = anon
                /*/**register* = anon
                **login* = anon
                /**/*login.do = anon
                /register* = anon
                /login* = anon
                /druid/* = anon
                /player.html = anon
                /rest/** = anon
                /user*/** = anon
                /unauthorized.jsp = anon
                /role* = authc,roles[admin]
                /permission* = authc,perms["user:create"]
                /**/*.jsp = authc
                /**/*.do = authc
            </value>
        </property>
    </bean>
</beans>